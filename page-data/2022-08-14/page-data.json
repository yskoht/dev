{"componentChunkName":"component---src-templates-post-tsx","path":"/2022-08-14","result":{"data":{"markdownRemark":{"html":"<h1>pmdr.day: リファクタリング</h1>\n<ul>\n<li>css まわりのリファクタリングはほとんど終わった</li>\n<li>mui まわりのリファクタリングがもう少し</li>\n</ul>\n<hr>\n<h1>pmdr.day: 環境変数</h1>\n<p>Next.js は　<code>NEXT_PUBLIC_</code> を環境変数のプレフィックスにするとビルド時にインライン化されて\nブラウザでも参照できる。</p>\n<p>環境変数をサーバーで使うもの、クライアントで使うもの、（両方で使うもの）に分けて、\n<code>NODE_ENV</code> ごとに zod で検証してできるようにした。\n環境変数の設定が漏れていたり、production では使っていけない環境変数などが設定されていたりしたら検出できる。</p>\n<p>型を書くのが難しかった。</p>\n<hr>\n<h1>pmdr.day: newtype</h1>\n<p>環境変数の検証で zod を使っていたら、branded types があることに気づいた。\nnewtype を使っていたけど unwrap とか面倒なので、これで十分なのかもしれない。</p>\n<p><a href=\"https://github.com/gcanti/newtype-ts\">gcanti/newtype-ts: Implementation of newtypes in TypeScript</a></p>\n<hr>\n<h1>misc: リファクタリングコミット率</h1>\n<p>リファクタリングばかりしていてプロジェクトが進んでない気がする。</p>\n<p>リファクタリングのコミットには <code>refactoring</code> と書いているので、\n直近 N コミットあたりのリファクタリングコミット数を数えて、リファクタリングコミット率を出す。</p>\n<pre><code class=\"language-sh\">$ git log --pretty=oneline| wc -l\n     412\n</code></pre>\n<p>412 コミット。思ったより少なかった。</p>\n<pre><code class=\"language-sh\">$ git log --pretty=oneline --reverse | ruby -ne 'BEGIN{ $a = []; $N = 10 }; $a.shift if $a.size == $N; $a.push($_); n = $a.size == $N ? $a.count{|log| log =~ /refactoring/ } : 0; puts \"#{n}, #{n.to_f / $N.to_f * 100}\"'\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/34795067/184541318-ad6fb2fa-186e-439c-a0df-37566795ff64.png\" alt=\"リファクタリングコミット数\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/34795067/184541741-6b3b450d-6df3-4d02-bb76-20150e20a281.png\" alt=\"リファクタリングコミット率(%)\"></p>\n<p>なんとなく周期が見えて面白い。</p>\n<hr>","fields":{"slug":"/2022-08-14"}}},"pageContext":{"slug":"/2022-08-14"}},"staticQueryHashes":["63159454"]}