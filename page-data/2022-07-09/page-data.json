{"componentChunkName":"component---src-templates-post-tsx","path":"/2022-07-09","result":{"data":{"markdownRemark":{"html":"<h1>pmdr.day: Chromatic</h1>\n<p>ビジュアルリグレッションテストのために Chromatic を導入し、\nmain ブランチプッシュ時に Github Actions で Chromatic にデプロイできるようにした。</p>\n<p>GitHub Actions のワークフローを書くために actionlint を入れて、\nnode のセットアップ（キャッシュ）と dependencies をインストールするアクションをライブラリ化した。</p>\n<p>TODO: 現在時刻に依存する部分に毎回差分が出てしまうので day.js を mock する。</p>\n<p><strong>Links</strong></p>\n<ul>\n<li><a href=\"https://www.chromatic.com/docs/\">Introduction • Chromatic docs</a></li>\n<li><a href=\"https://devblog.thebase.in/entry/2021/12/08/203039\">Storybook と Chromatic でビジュアルリグレッションテストを実施する - BASE プロダクトチームブログ</a></li>\n<li><a href=\"https://rhysd.hatenablog.com/entry/2021/07/11/214313\">GitHub Actions のワークフローをチェックする actionlint をつくった - はやくプログラムになりたい</a></li>\n</ul>\n<hr>\n<h1>misc: Hemingway Editor と Grammarly</h1>\n<p><a href=\"https://podcasts.apple.com/us/podcast/47-%E3%83%86%E3%83%83%E3%82%AF%E6%A5%AD%E7%95%8C%E3%81%A7%E5%84%AA%E3%82%8C%E3%81%9F%E6%9B%B8%E3%81%8D%E6%89%8B%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%B3%E3%83%84/id1529233853?i=1000550232291\">Today I Learned: 47. テック業界で優れた書き手になるコツ</a> を聞いて知った。</p>\n<p>README を改善したい…</p>\n<hr>\n<h1>dev: Gatsby</h1>\n<p>気楽なブログを始めたいので作った。最近よく調べ物をするのでそのメモを残しておきたい。</p>\n<p>GitHub に markdown をおいておくだけでも良いんですが、どうせなら html にしようかなと。\nこういうのは見た目にこだわると内容を書く前に燃え尽きてしまうんで、さくっとやりきることが大切。</p>\n<p>他のフレームワークは全く調べず作り出してしまったが、今の所やりたいことはできているので良かった。\n感想としては better WordPress みたいな。</p>\n<p>やりたかったのは以下。</p>\n<ul>\n<li>markdown から html に変換\n<ul>\n<li><a href=\"https://www.gatsbyjs.com/plugins/gatsby-transformer-remark/\">gatsby-transformer-remark | Gatsby</a></li>\n</ul>\n</li>\n<li>日付ごとにページを作る\n<ul>\n<li><a href=\"https://reffect.co.jp/react/gatsby-basic-tutorial-for-beginners-3\">GatsbyJS での動的ページ自動作成方法を理解したい | アールエフェクト</a></li>\n</ul>\n</li>\n<li>GitHub Actions でビルド。GitHub Pages にデプロイ\n<ul>\n<li><a href=\"https://kanamesasaki.github.io/blog/20220124-gatsby-blog/\">Gatsby と GitHub Pages で作る Markdown ブログ | Blog</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages/\">How Gatsby Works with GitHub Pages | Gatsby</a></li>\n</ul>\n</li>\n</ul>\n<p>TypeScript 化はいずれしたい。</p>\n<h2>詰まったところ</h2>\n<h3>ビルドエラー</h3>\n<pre><code> ERROR #85923  GRAPHQL\n\nThere was an error in your GraphQL query:\n\nCannot query field \"fields\" on type \"MarkdownRemark\".\n</code></pre>\n<p>1 つも markdown がないからだった。</p>\n<h3>GitHub Actions からデプロイ</h3>\n<p>はまった。↓ を初めから見ていればよかったのに。</p>\n<ul>\n<li><a href=\"https://github.com/tschaub/gh-pages#deploying-with-github-actions\">Deploying with GitHub Actions</a></li>\n</ul>\n<p>これでも良さそう。</p>\n<ul>\n<li><a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages: GitHub Actions for GitHub Pages 🚀 Deploy static files and publish your site easily. Static-Site-Generators-friendly.</a></li>\n</ul>\n<p><strong>Links</strong></p>\n<ul>\n<li><a href=\"https://www.gatsbyjs.com/docs/\">Welcome to the Gatsby Way of Building | Gatsby</a></li>\n</ul>\n<hr>\n<h1>misc: Code Spell Checker</h1>\n<p>VSCode で使っている Code Spell Checker の辞書に単語を登録して、\nコード上の波線を消していくのが最近の趣味ですが、<code>settings.json</code> を開いて編集しなくても、\n単語をドラッグ &#x26; 右クリック <code>Add Words to Workspace Settings</code> で登録できることに気づいた。</p>","fields":{"slug":"/2022-07-09"}}},"pageContext":{"slug":"/2022-07-09"}},"staticQueryHashes":["63159454"]}