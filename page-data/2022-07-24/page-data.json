{"componentChunkName":"component---src-templates-post-tsx","path":"/2022-07-24","result":{"data":{"markdownRemark":{"html":"<h1>pmdr: next.js と suspense</h1>\n<p>jotai で async read atom を読みだしたところ、next.js で処理が終わらないみたいな挙動になってしまった。\nStorybook では動いていたのに。</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">nextjs で error boundary が使えなさそうだなと思って色々調べてみたらこんな discussion があった...<br>多分いないと思うけど誰かできてる人やり方教えてください〜〜<a href=\"https://t.co/fKWONiyvNv\">https://t.co/fKWONiyvNv</a></p>&mdash; へっくす (@codehex) <a href=\"https://twitter.com/codehex/status/1354679596910710786?ref_src=twsrc%5Etfw\">January 28, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"https://nextjs.org/docs/advanced-features/react-18/server-components\">React Server Components</a> よくわかってない。</p>\n<p>結局 <code class=\"language-text\">next/dynamic</code> で CSR にした。</p>\n<hr>\n<h1>pmdr: jotai → recoil 移行</h1>\n<p>recoil のドキュメント読んでなんか複雑そうに感じたので、もっとシンプルな jotai を使っていたが、\nasync read atom に引数を渡せなさそうだった（クエリパラメータを渡したかった）ので recoil にした。</p>\n<p>recoil はキャッシュしてくれるので Storybook 上で動かすと最初に取得した値を保持してしまう。\nとりあえず <code class=\"language-text\">useRecoilRefresher_UNSTABLE</code> しているが、状態を追加するたびに Refresher も追加しないといけない。</p>","fields":{"slug":"/2022-07-24"}}},"pageContext":{"slug":"/2022-07-24","prevSlug":"/2022-07-18","nextSlug":"/2022-07-28"}},"staticQueryHashes":["63159454"]}