{"componentChunkName":"component---src-templates-post-tsx","path":"/2022-10-02","result":{"data":{"markdownRemark":{"html":"<h1>pmdr: DI</h1>\n<p>Nest の DI は実装を参照しているからなんか違う気がするなと思っていて、\nインターフェースを渡すこともできるけど、<code class=\"language-text\">@Inject</code> でタグをつけないといけない。\nそこで abstract class が使える。</p>\n<ul>\n<li><a href=\"https://dev.to/ef/nestjs-dependency-injection-with-abstract-classes-4g65\">NestJS Dependency Injection with Abstract Classes - DEV Community 👩‍💻👨‍💻</a></li>\n</ul>\n<hr>\n<h1>pmdr: zod.brand</h1>\n<p>dayjs のオブジェクトをそのままブランド型にするのが <code class=\"language-text\">z.brand</code> だとできないなと思っていたけど\n<code class=\"language-text\">z.instanceof(Dayjs).brand&lt;'DateType'>()</code> でできることに気づいた。</p>\n<p>例えば、ユーザー型を作るときに、<code class=\"language-text\">UserId</code> を作って、</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> userIdSchema <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">brand</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token string\">\"UserId\"</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserId</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> userIdSchema<span class=\"token operator\">></span></code></pre></div>\n<p>その後 <code class=\"language-text\">User</code> 型を作る。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> userSchema <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> userIdSchema<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> userSchema<span class=\"token operator\">></span></code></pre></div>\n<p>バリデートした後の結果が入れ子になっていても、ちゃんとブランド型になっていて便利。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> userSchema<span class=\"token punctuation\">.</span><span class=\"token function\">safeParse</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"validation error\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data\n<span class=\"token keyword\">const</span> userId<span class=\"token operator\">:</span> UserId <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>id</code></pre></div>","fields":{"slug":"/2022-10-02"}}},"pageContext":{"slug":"/2022-10-02","prevSlug":"/2022-09-25","nextSlug":"/2022-10-15"}},"staticQueryHashes":["63159454"]}