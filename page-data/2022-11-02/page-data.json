{"componentChunkName":"component---src-templates-post-tsx","path":"/2022-11-02","result":{"data":{"markdownRemark":{"html":"<h1>pmdr: cookie</h1>\n<p>ここ 2 週間くらいはログインの実装をしていた。\nSSR するときに cookie を使って認証したい、そうすると CSRF 対策とかしないといけないとなり、\nCSRF の記事を読んだり、ライブラリを読んだりしていた。</p>\n<p>Next.js で Firebase Auth ログインする以下の記事では、\nフロントエンドでトークンを取得した後に、フロントエンドで cookie を保存していて不安になる。</p>\n<ul>\n<li><a href=\"https://colinhacks.com/essays/nextjs-firebase-authentication\">Authenticated server-side rendering with Next.js and Firebase</a></li>\n</ul>\n<p>Firebase Auth はセッション cookie を管理することができて、\n以下の記事だとサーバーで cookie を返すようにしている。\nCSRF 対策が必要と書かれているが、詳細は書かれてない。</p>\n<ul>\n<li><a href=\"https://firebase.google.com/docs/auth/admin/manage-cookies\">セッション Cookie を管理する  |  Firebase Authentication</a></li>\n</ul>\n<p><code class=\"language-text\">next-csrf</code> というライブラリがあるが、これは cookie を使って token と secret をやり取りしていて、\nあんまり意味がないように思われる。</p>\n<ul>\n<li><a href=\"https://github.com/j0lv3r4/next-csrf/issues/49\">The implementation probably defeats the purpose of CSRF protection · Issue #49 · j0lv3r4/next-csrf</a></li>\n</ul>\n<p>CSRF トークンを cookie や ブラウザのローカルストレージに保存するのは推奨されていなそう。</p>\n<blockquote>\n<p>A CSRF token can be included in the <meta> tag as shown below. All subsequent calls in the page can extract the CSRF token from this <meta> tag. It can also be stored in a JavaScript variable or anywhere on the DOM. However, it is not recommended to store it in cookies or browser local storage.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#cross-site-request-forgery-prevention-cheat-sheet\">Cross-Site Request Forgery Prevention - OWASP Cheat Sheet Series</a></li>\n</ul>\n<hr>\n<h1>pmdr: https-portal</h1>\n<p><code class=\"language-text\">SameSite: None</code> を設定しようとすると <code class=\"language-text\">Secure</code> が必要になるので <code class=\"language-text\">https-portal</code> を使った。</p>\n<ul>\n<li><a href=\"https://github.com/SteveLTN/https-portal\">SteveLTN/https-portal: A fully automated HTTPS server powered by Nginx, Let's Encrypt and Docker.</a></li>\n<li><a href=\"https://qiita.com/muk-ai/items/413ae83b0a241495dd34\">Docker でローカル開発環境の https 化 - Qiita</a></li>\n</ul>\n<hr>\n<h1>pmdr: withCredentials</h1>\n<p>実装してサーバーから cookie を返してみたが、ブラウザに保存されなくて随分悩んだ。\n<code class=\"language-text\">localhost</code> だから悪いのかとか、自己証明書を使っているサイトだからなのかとか色々考えたが、\n以下の記事を参考に最小構成を作ったらあっさり保存できた。\n結局のところサーバーの実装は問題なくて、<code class=\"language-text\">axios</code> に <code class=\"language-text\">withCredentials: true</code> が正しく設定できていなかったのが原因だった。</p>\n<ul>\n<li><a href=\"https://qiita.com/Syy12345-Unity/items/eaa913ecc80e8cb96f0b\">クロスオリジンで cookie の挙動を確認する - Qiita</a></li>\n</ul>\n<hr>\n<h1>misc: thisisunsafe</h1>\n<p>自己証明書を使ったときに chrome で表示される警告を無視するボタンが無いなと思っていたら\n<code class=\"language-text\">thisisunsafe</code> とタイプすれば良いらしい。</p>\n<ul>\n<li><a href=\"https://techtechmedia.com/this-is-unsafe/\">【Google Chrome】「この接続ではプライバシーが保護されません」が出た時の対処方法｜ TechTechMedia</a></li>\n</ul>\n<hr>\n<h1>misc: curl -k</h1>\n<p>curl で証明書のエラーを無視するには <code class=\"language-text\">-k</code></p>","fields":{"slug":"/2022-11-02"}}},"pageContext":{"slug":"/2022-11-02","prevSlug":"/2022-10-18","nextSlug":null}},"staticQueryHashes":["63159454"]}