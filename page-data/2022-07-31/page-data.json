{"componentChunkName":"component---src-templates-post-tsx","path":"/2022-07-31","result":{"data":{"markdownRemark":{"html":"<h1>pmdr.day: suspense</h1>\n<p>あるコンポーネントが suspense しているときに、別コンポーネントの状態を変えたい。\n例えば、</p>\n<pre><code class=\"language-tsx\">&#x3C;A />\n&#x3C;Suspense fallback={&#x3C;B' />}>\n  &#x3C;B />\n&#x3C;/Suspense>\n</code></pre>\n<p><code>B</code> が fallback しているときに <code>A</code> の状態を変えたい、みたいなことがあった。\n最終的には回避する方法を考えたけれどうまく実装する方法はあるんだろうか。</p>\n<pre><code class=\"language-tsx\">&#x3C;Suspense fallback={\n  &#x3C;>\n    &#x3C;A' />\n    &#x3C;B' />\n  &#x3C;/>\n}>\n  &#x3C;A />\n  &#x3C;B />\n&#x3C;/Suspense>\n</code></pre>\n<hr>\n<h1>pmdr.day: mui の theme</h1>\n<p>Theme の色を使う方法がわかった。</p>\n<p>CSS は Emotion を使っているが、mui のコンポーネントは <code>css</code> に <code>Theme</code> を渡してくれる。</p>\n<p><code>Theme</code> の型は <code>any</code> にしないといけなかった。</p>\n<pre><code class=\"language-tsx\">import { Paper } from \"@mui/material\"\n\nconst Component = () => &#x3C;Paper css={style}>...&#x3C;/Paper>\n</code></pre>\n<pre><code class=\"language-tsx\">import { css, SerializedStyles } from \"@emotion/react\"\nimport { Theme } from \"@mui/material\"\n\ntype Style = (theme: any) => SerializedStyles\nconst style: Style = ({ palette }: Theme) =>\n  css({\n    backgroundColor: palette.error.main,\n  })\n</code></pre>\n<p>型も以下で追加できた。</p>\n<p><a href=\"https://mui.com/material-ui/customization/palette/#adding-new-colors\">Palette - Material UI</a></p>\n<hr>","fields":{"slug":"/2022-07-31"}}},"pageContext":{"slug":"/2022-07-31"}},"staticQueryHashes":["63159454"]}